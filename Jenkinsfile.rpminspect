#!groovy

timestamps {
    // CANNED CI_MESSAGE
    def CANNED_CI_MESSAGE = '{"build_id":1404149,"old":0,"name":"mirrormanager2","task_id":38507123,"attribute":"state","request":["git+https://src.fedoraproject.org/rpms/mirrormanager2.git#763ae90d00b4735a32c96407103e4a4e31360de6","f30-candidate",{}],"instance":"primary","epoch":null,"version":"0.11","owner":"adrian","new":1,"release":"1.fc30"}'

    // Initialize all the ghprb variables we need
    env.ghprbGhRepository = env.ghprbGhRepository ?: 'msrb/fedora-ci-generic-checks'
    env.ghprbActualCommit = env.ghprbActualCommit ?: 'test'
    env.ghprbPullAuthorLogin = env.ghprbPullAuthorLogin ?: ''
    env.ghprbPullId = env.ghprbPullId ?: ''

    // Task ID to bypass rpm build and grab artifacts from koji
    env.PROVIDED_KOJI_TASKID = env.PROVIDED_KOJI_TASKID ?: ''
    // Default to build being scratch, will be overridden if triggered by nonscratch build
    env.isScratch = true
    env.PAGURE_URL = env.PAGURE_URL ?: 'https://src.fedoraproject.org'

    // Needed for podTemplate()
    env.SLAVE_TAG = env.SLAVE_TAG ?: 'stable'
    env.FEDORACI_RUNNER_TAG = env.FEDORACI_RUNNER_TAG ?: 'stable'

    // Execution ID for this run of the pipeline
    def executionID = UUID.randomUUID().toString()
    env.pipelineId = env.pipelineId ?: executionID

    // Pod name to use
    def podName = 'fedora-package-check-' + executionID

    // Number of CPU cores for the package-checks container
    runnerCpuLimit = '1'

    def libraries = ['cico-pipeline'           : ['master', 'https://github.com/CentOS/cico-pipeline-library.git'],
                     'contra-lib'              : ['master', 'https://github.com/openshift/contra-lib.git'],
                     'upstream-pipeline'       : ['master', 'https://github.com/CentOS-PaaS-SIG/upstream-fedora-pipeline.git']] // should probably pin this to a release

    libraries.each { name, repo ->
        library identifier: "${name}@${repo[0]}",
                retriever: modernSCM([$class: 'GitSCMSource',
                                      remote: repo[1]])

    }

     Check out PR's version of library
    library identifier: "upstream-fedora-pipeline@${env.ghprbActualCommit}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: "https://github.com/${env.ghprbGhRepository}",
                                  traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                           [$class: 'RefSpecsSCMSourceTrait',
                                            templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                        [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])

    node() {

        def jobMeasurement = buildCheckUtils.timedMeasurement()

    }
}
